export const goerliABI = [
  { inputs: [], name: "bridgeEmpty", type: "error" },
  { inputs: [], name: "bridgeOnOtherSideNeedsLiqudity", type: "error" },
  { inputs: [], name: "bridgedAlready", type: "error" },
  { inputs: [], name: "msgValueNot1003", type: "error" },
  { inputs: [], name: "msgValueZero", type: "error" },
  { inputs: [], name: "notExternalBridge", type: "error" },
  { inputs: [], name: "notOwnerAddress", type: "error" },
  { inputs: [], name: "ownerBridgeUsersBeforeWithdraw", type: "error" },
  { inputs: [], name: "queueIsEmpty", type: "error" },
  { inputs: [], name: "queueNotEmpty", type: "error" },
  {
    inputs: [],
    name: "automatedUnlockGoerliETH",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [{ internalType: "bytes", name: "", type: "bytes" }],
    name: "checkUpkeep",
    outputs: [
      { internalType: "bool", name: "upkeepNeeded", type: "bool" },
      { internalType: "bytes", name: "", type: "bytes" },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "dequeue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "lockTokensForOptimism",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "_token", type: "address" }],
    name: "mockOwnerOptimismBridgeAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "ownerAddBridgeLiqudity",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "ownerRemoveBridgeLiqudity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [{ internalType: "bytes", name: "", type: "bytes" }],
    name: "performUpkeep",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  { inputs: [], stateMutability: "nonpayable", type: "constructor" },
  {
    inputs: [],
    name: "first",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "last",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "optimismBridgeInstance",
    outputs: [
      { internalType: "contractMockOptimismBridge", name: "", type: "address" },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Owner",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    name: "queue",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
];

export const optimismABI = [
  { inputs: [], stateMutability: "nonpayable", type: "constructor" },
  { inputs: [], name: "bridgeEmpty", type: "error" },
  { inputs: [], name: "bridgeOnOtherSideNeedsLiqudity", type: "error" },
  { inputs: [], name: "msgValueNot1003", type: "error" },
  { inputs: [], name: "msgValueZero", type: "error" },
  { inputs: [], name: "notExternalBridge", type: "error" },
  { inputs: [], name: "notOwnerAddress", type: "error" },
  { inputs: [], name: "queueIsEmpty", type: "error" },
  { inputs: [], name: "queueNotEmpty", type: "error" },
  {
    inputs: [],
    name: "Owner",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "dequeue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "first",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "last",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lockTokensForGoerli",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "ownerAddBridgeLiqudity",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "ownerRemoveBridgeLiqudity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "userToBridge", type: "address" },
    ],
    name: "ownerUnlockOptimismETH",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    name: "queue",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
];

export const goerliToMumbai = [
  {
    inputs: [
      { internalType: "address", name: "addressWETH", type: "address" },
      { internalType: "address", name: "addressWMATIC", type: "address" },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  { inputs: [], name: "bridgeEmpty", type: "error" },
  { inputs: [], name: "bridgeOnOtherSideNeedsLiqudity", type: "error" },
  { inputs: [], name: "bridgedAlready", type: "error" },
  { inputs: [], name: "msgValueNot1003", type: "error" },
  { inputs: [], name: "msgValueZero", type: "error" },
  { inputs: [], name: "notExternalBridge", type: "error" },
  { inputs: [], name: "notOwnerAddress", type: "error" },
  { inputs: [], name: "ownerBridgeUsersBeforeWithdraw", type: "error" },
  { inputs: [], name: "queueIsEmpty", type: "error" },
  { inputs: [], name: "queueNotEmpty", type: "error" },
  {
    inputs: [],
    name: "Owner",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "automatedrUnlockGoerliETH",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "callMATIC",
    outputs: [
      {
        internalType: "contractERC20TokenContractMATIC",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "callWETH",
    outputs: [
      {
        internalType: "contractERC20TokenContractWETH",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "bytes", name: "", type: "bytes" }],
    name: "checkUpkeep",
    outputs: [
      { internalType: "bool", name: "upkeepNeeded", type: "bool" },
      { internalType: "bytes", name: "", type: "bytes" },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "dequeue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "first",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "last",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lockTokensForOptimism",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "_token", type: "address" }],
    name: "mockOwnerOptimismBridgeAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "mumbaiBridgeInstance",
    outputs: [
      { internalType: "contractMockMumbaiBridge", name: "", type: "address" },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ownerRemoveBridgeLiqudity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [{ internalType: "bytes", name: "", type: "bytes" }],
    name: "performUpkeep",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    name: "queue",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
];

export const mumbaiToGoerliABI = [
  {
    inputs: [
      { internalType: "address", name: "addressWETH", type: "address" },
      { internalType: "address", name: "addressWMATIC", type: "address" },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  { inputs: [], name: "bridgeEmpty", type: "error" },
  { inputs: [], name: "bridgeOnOtherSideNeedsLiqudity", type: "error" },
  { inputs: [], name: "msgValueNot1003", type: "error" },
  { inputs: [], name: "msgValueZero", type: "error" },
  { inputs: [], name: "notExternalBridge", type: "error" },
  { inputs: [], name: "notOwnerAddress", type: "error" },
  { inputs: [], name: "queueIsEmpty", type: "error" },
  { inputs: [], name: "queueNotEmpty", type: "error" },
  {
    inputs: [],
    name: "Owner",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "automateUnlockOptimismETH",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "callMATIC",
    outputs: [
      {
        internalType: "contractERC20TokenContractMATIC",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "callWETH",
    outputs: [
      {
        internalType: "contractERC20TokenContractWETH",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "bytes", name: "", type: "bytes" }],
    name: "checkUpkeep",
    outputs: [
      { internalType: "bool", name: "upkeepNeeded", type: "bool" },
      { internalType: "bytes", name: "", type: "bytes" },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "dequeue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "first",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "goerliBridgeInstance",
    outputs: [
      {
        internalType: "contractMockGoerliBridgeERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "last",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lockTokensForGoerli",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "_token", type: "address" }],
    name: "mockOwnerGoerliBridgeAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "ownerRemoveBridgeLiqudity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [{ internalType: "bytes", name: "", type: "bytes" }],
    name: "performUpkeep",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    name: "queue",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
];
